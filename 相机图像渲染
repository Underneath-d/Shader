using System.Collections;
using System.Collections.Generic;  
using UnityEngine;  
using UnityEngine.UI;

public class CameraImagery: MonoBehaviour {  

	  public string DeviceName;    
	  public Vector2 CameraSize;  
   	public float CameraFPS;

    private bool p1;
    private bool p2;

    private float a;
    private float c;
    private float b;


    WebCamTexture _webCamera;    
	  public GameObject Plane;

    public GameObject pbutton1;
    public GameObject pbutton2;

	  public Button paishe;
    public Button tingpai;
	
	  void Start(){
        p1 = false;
        p2 = true;

        if (!p1) {
            paishe.onClick.AddListener(kaipai);
        }
	  }

    private void Update()
    {
        if (Input.GetMouseButtonDown(2)) {
            StopCamera();
        } 

        if (p1) {
            StartCoroutine("InitCameraCor");
            
            pbutton2.active = true;
            pbutton1.active = false;
            p1 = false;
        }
        
        a = Screen.width;
        b = Screen.height;
        
        if (a >= b)
        {
            c = a /72;

        }
        else
        {
            c = b / 72;

        }
    }

	public void PlayCamera()  
	{  
		Plane.GetComponent<MeshRenderer> ().enabled = true;  
		_webCamera.Play();  
	}

    void tingp() {
        p1 = true;
    }

    void kaipai() {
        p1 = true;
    }

	public void StopCamera()  
	{  
		Plane.GetComponent<MeshRenderer> ().enabled =false;  
		_webCamera.Stop();  
	}  

	public IEnumerator InitCameraCor()    
	{    
		yield return Application.RequestUserAuthorization(UserAuthorization.WebCam);    
		if (Application.HasUserAuthorization(UserAuthorization.WebCam))    
		{    
			WebCamDevice[] devices = WebCamTexture.devices;    
			DeviceName= devices[0].name;    
			_webCamera=new WebCamTexture(DeviceName,(int)CameraSize.x,(int)CameraSize.y,(int)CameraFPS);  

			Plane.GetComponent<Renderer> ().material.mainTexture=_webCamera;  
			Plane.transform.localScale = new Vector3 (8f,1,5f);  

			_webCamera.Play(); 
		}    
	}  
}  

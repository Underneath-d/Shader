
Shader "Skin/vertexChange"
{

    properties{
        _R("R",range(0,5))=1
        _OX("OX",range(-5,5))=0
    }
    SubShader
    {
        pass
        {
           CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "unitycg.cginc"

            float dis;
            float vis;
            float _R;
            float _OX;

            struct v2f{
                float4 pos:POSITION;
                fixed4 color:COLOR;
            };

            struct appdate_base{
                float4 vertex:POSITION;
            };

            v2f vert(appdate_base v)
            {
                

                v2f o;
                //o.pos=UnityObjectToClipPos(v.vertex);//在相机投影坐标控制渲染，相机坐标区间为（-1，1），可实现流水灯

                float x=o.pos.x/o.pos.w;

                //if(x>dis && x<dis+vis)
                //    o.color=fixed4(1,0,0,1);//UNITY_MATRIX_MVP_SinTime.w/2+0.5,_CosTime.w/2+0.5,_SinTime.w/2+0.5
                //else
                //   o.color=fixed4(x/2+0.5,x/2+0.5,x/2+0.5,1);

                float4 wpos=mul(unity_ObjectToWorld,v.vertex);//根据世界或自身坐标，改变模型内顶点，形成新模型，但只改变视图，物理效果不行
                
                float2 xy=wpos.xz;//v.vertex.xz;此时是自身坐标
                float d=_R-length(xy-float2(_OX,0));
                d=d<0?0:d;
                float height=1;
                float4 uppos=float4(v.vertex.x,height*d,v.vertex.z,v.vertex.w);
                o.color=fixed4(uppos.y,uppos.y,uppos.y,1);
                o.pos=UnityObjectToClipPos(uppos);

                return o;
            }

            fixed4 frag(v2f IN):COLOR
            {
                return IN.color;
            }

            ENDCG
        }
    }
}
